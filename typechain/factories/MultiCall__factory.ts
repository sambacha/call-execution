/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MultiCall, MultiCallInterface } from "../MultiCall";

const _abi = [
  {
    inputs: [],
    name: "gasLeft",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gaslimit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MultiCall.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MultiCall.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "multicallWithGas",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
      {
        internalType: "uint256[]",
        name: "gasUsed",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MultiCall.Call[]",
        name: "calls",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "gasBuffer",
        type: "uint256",
      },
    ],
    name: "multicallWithGasLimitation",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
      {
        internalType: "uint256",
        name: "lastSuccessIndex",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d84806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632a7228391461005c5780632ddb301b1461007a578063489dba1614610098578063caa5c23f146100c9578063d699fe15146100f9575b600080fd5b61006461012a565b6040516100719190610a26565b60405180910390f35b610082610132565b60405161008f9190610a26565b60405180910390f35b6100b260048036038101906100ad919061075a565b61013a565b6040516100c09291906109bf565b60405180910390f35b6100e360048036038101906100de919061075a565b6102f4565b6040516100f0919061099d565b60405180910390f35b610113600480360381019061010e91906107a3565b610430565b6040516101219291906109f6565b60405180910390f35b600045905090565b60005a905090565b606080825167ffffffffffffffff81111561015857610157610ce6565b5b60405190808252806020026020018201604052801561018b57816020015b60608152602001906001900390816101765790505b509150825167ffffffffffffffff8111156101a9576101a8610ce6565b5b6040519080825280602002602001820160405280156101d75781602001602082028036833780820191505090505b50905060005b83518110156102ee5760005a90508482815181106101fe576101fd610cb7565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1685838151811061023357610232610cb7565b5b60200260200101516020015160405161024c9190610986565b6000604051808303816000865af19150503d8060008114610289576040519150601f19603f3d011682016040523d82523d6000602084013e61028e565b606091505b5090508483815181106102a4576102a3610cb7565b5b60200260200101819052505a816102bb9190610b5c565b8383815181106102ce576102cd610cb7565b5b6020026020010181815250505080806102e690610c3f565b9150506101dd565b50915091565b6060815167ffffffffffffffff81111561031157610310610ce6565b5b60405190808252806020026020018201604052801561034457816020015b606081526020019060019003908161032f5790505b50905060005b825181101561042a5782818151811061036657610365610cb7565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1683828151811061039b5761039a610cb7565b5b6020026020010151602001516040516103b49190610986565b6000604051808303816000865af19150503d80600081146103f1576040519150601f19603f3d011682016040523d82523d6000602084013e6103f6565b606091505b50905082828151811061040c5761040b610cb7565b5b6020026020010181905250808061042290610c3f565b91505061034a565b50919050565b60606000835167ffffffffffffffff81111561044f5761044e610ce6565b5b60405190808252806020026020018201604052801561048257816020015b606081526020019060019003908161046d5790505b50915060005b845181101561057c578481815181106104a4576104a3610cb7565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168582815181106104d9576104d8610cb7565b5b6020026020010151602001516040516104f29190610986565b6000604051808303816000865af19150503d806000811461052f576040519150601f19603f3d011682016040523d82523d6000602084013e610534565b606091505b50905083828151811061054a57610549610cb7565b5b6020026020010181905250835a10156105695782819250925050610591565b808061057490610c3f565b915050610488565b50816001855161058c9190610b5c565b915091505b9250929050565b60006105ab6105a684610a66565b610a41565b905080838252602082019050828560208602820111156105ce576105cd610d24565b5b60005b8581101561061c57813567ffffffffffffffff8111156105f4576105f3610d15565b5b80860161060189826106d9565b855260208501945060208401935050506001810190506105d1565b5050509392505050565b600061063961063484610a92565b610a41565b90508281526020810184848401111561065557610654610d29565b5b610660848285610bcc565b509392505050565b60008135905061067781610d49565b92915050565b600082601f83011261069257610691610d15565b5b81356106a2848260208601610598565b91505092915050565b600082601f8301126106c0576106bf610d15565b5b81356106d0848260208601610626565b91505092915050565b6000604082840312156106ef576106ee610d1a565b5b6106f96040610a41565b9050600061070984828501610668565b600083015250602082013567ffffffffffffffff81111561072d5761072c610d1f565b5b610739848285016106ab565b60208301525092915050565b60008135905061075481610d60565b92915050565b6000602082840312156107705761076f610d33565b5b600082013567ffffffffffffffff81111561078e5761078d610d2e565b5b61079a8482850161067d565b91505092915050565b600080604083850312156107ba576107b9610d33565b5b600083013567ffffffffffffffff8111156107d8576107d7610d2e565b5b6107e48582860161067d565b92505060206107f585828601610745565b9150509250929050565b600061080b83836108fe565b905092915050565b600061081f8383610968565b60208301905092915050565b600061083682610ae3565b6108408185610b1e565b93508360208202850161085285610ac3565b8060005b8581101561088e578484038952815161086f85826107ff565b945061087a83610b04565b925060208a01995050600181019050610856565b50829750879550505050505092915050565b60006108ab82610aee565b6108b58185610b2f565b93506108c083610ad3565b8060005b838110156108f15781516108d88882610813565b97506108e383610b11565b9250506001810190506108c4565b5085935050505092915050565b600061090982610af9565b6109138185610b40565b9350610923818560208601610bdb565b61092c81610d38565b840191505092915050565b600061094282610af9565b61094c8185610b51565b935061095c818560208601610bdb565b80840191505092915050565b61097181610bc2565b82525050565b61098081610bc2565b82525050565b60006109928284610937565b915081905092915050565b600060208201905081810360008301526109b7818461082b565b905092915050565b600060408201905081810360008301526109d9818561082b565b905081810360208301526109ed81846108a0565b90509392505050565b60006040820190508181036000830152610a10818561082b565b9050610a1f6020830184610977565b9392505050565b6000602082019050610a3b6000830184610977565b92915050565b6000610a4b610a5c565b9050610a578282610c0e565b919050565b6000604051905090565b600067ffffffffffffffff821115610a8157610a80610ce6565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610aad57610aac610ce6565b5b610ab682610d38565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000610b6782610bc2565b9150610b7283610bc2565b925082821015610b8557610b84610c88565b5b828203905092915050565b6000610b9b82610ba2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610bf9578082015181840152602081019050610bde565b83811115610c08576000848401525b50505050565b610c1782610d38565b810181811067ffffffffffffffff82111715610c3657610c35610ce6565b5b80604052505050565b6000610c4a82610bc2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c7d57610c7c610c88565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b610d5281610b90565b8114610d5d57600080fd5b50565b610d6981610bc2565b8114610d7457600080fd5b5056fea164736f6c6343000806000a";

export class MultiCall__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MultiCall> {
    return super.deploy(overrides || {}) as Promise<MultiCall>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MultiCall {
    return super.attach(address) as MultiCall;
  }
  connect(signer: Signer): MultiCall__factory {
    return super.connect(signer) as MultiCall__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiCallInterface {
    return new utils.Interface(_abi) as MultiCallInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiCall {
    return new Contract(address, _abi, signerOrProvider) as MultiCall;
  }
}
