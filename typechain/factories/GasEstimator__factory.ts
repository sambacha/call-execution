/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { GasEstimator, GasEstimatorInterface } from "../GasEstimator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "estimate",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "gas",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506103f6806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630eb34cd314610030575b600080fd5b61004a60048036038101906100459190610161565b610062565b60405161005993929190610256565b60405180910390f35b600060606000805a90508673ffffffffffffffffffffffffffffffffffffffff16868660405161009392919061023d565b6000604051808303816000865af19150503d80600081146100d0576040519150601f19603f3d011682016040523d82523d6000602084013e6100d5565b606091505b5080945081955050505a816100ea91906102bb565b91505093509350939050565b600081359050610105816103d2565b92915050565b60008083601f840112610121576101206103ad565b5b8235905067ffffffffffffffff81111561013e5761013d6103a8565b5b60208301915083600182028301111561015a576101596103b2565b5b9250929050565b60008060006040848603121561017a576101796103bc565b5b6000610188868287016100f6565b935050602084013567ffffffffffffffff8111156101a9576101a86103b7565b5b6101b58682870161010b565b92509250509250925092565b6101ca81610301565b82525050565b60006101dc83856102b0565b93506101e9838584610337565b82840190509392505050565b600061020082610294565b61020a818561029f565b935061021a818560208601610346565b610223816103c1565b840191505092915050565b6102378161032d565b82525050565b600061024a8284866101d0565b91508190509392505050565b600060608201905061026b60008301866101c1565b818103602083015261027d81856101f5565b905061028c604083018461022e565b949350505050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006102c68261032d565b91506102d18361032d565b9250828210156102e4576102e3610379565b5b828203905092915050565b60006102fa8261030d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610364578082015181840152602081019050610349565b83811115610373576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6103db816102ef565b81146103e657600080fd5b5056fea164736f6c6343000806000a";

export class GasEstimator__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GasEstimator> {
    return super.deploy(overrides || {}) as Promise<GasEstimator>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): GasEstimator {
    return super.attach(address) as GasEstimator;
  }
  connect(signer: Signer): GasEstimator__factory {
    return super.connect(signer) as GasEstimator__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GasEstimatorInterface {
    return new utils.Interface(_abi) as GasEstimatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GasEstimator {
    return new Contract(address, _abi, signerOrProvider) as GasEstimator;
  }
}
